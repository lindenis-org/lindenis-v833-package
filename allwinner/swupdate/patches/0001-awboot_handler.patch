diff --git a/Makefile.flags b/Makefile.flags
index 7a87759..359aba5 100644
--- a/Makefile.flags
+++ b/Makefile.flags
@@ -181,6 +181,10 @@ ifeq ($(CONFIG_UBOOT),y)
 LDLIBS += z ubootenv
 endif
 
+ifeq ($(CONFIG_AWBOOT_HANDLER),y)
+LDLIBS += ota-burnboot
+endif
+
 ifeq ($(CONFIG_SYSTEMD),y)
 LDLIBS += systemd
 endif
diff --git a/handlers/Config.in b/handlers/Config.in
index 91d43f3..5bcc093 100644
--- a/handlers/Config.in
+++ b/handlers/Config.in
@@ -207,6 +207,13 @@ config BOOTLOADERHANDLER
 	  Enable it to change bootloader environment
 	  during the installation process.
 
+config AWBOOT_HANDLER
+	bool "allwinner boot0/uboot"
+	default n
+	help
+	  Handler using the libota-burnboot to update
+	  boot0/uboot for allwinner platform.
+
 config UCFWHANDLER
 	bool "microcontroller firmware update"
 	depends on HAVE_LIBGPIOD
diff --git a/handlers/Makefile b/handlers/Makefile
index b75c3ba..1c70a24 100644
--- a/handlers/Makefile
+++ b/handlers/Makefile
@@ -20,3 +20,4 @@ obj-$(CONFIG_SWUFORWARDER_HANDLER) += swuforward_handler.o
 obj-$(CONFIG_UBIVOL)	+= ubivol_handler.o
 obj-$(CONFIG_UCFWHANDLER)	+= ucfw_handler.o
 obj-$(CONFIG_RDIFFHANDLER) += rdiff_handler.o
+obj-$(CONFIG_AWBOOT_HANDLER)	+= awboot_handler.o
diff --git a/handlers/awboot_handler.c b/handlers/awboot_handler.c
new file mode 100644
index 0000000..ed56625
--- /dev/null
+++ b/handlers/awboot_handler.c
@@ -0,0 +1,101 @@
+/*
+ * (C) Copyright 2018
+ * zhuangqiubin, Allwinner Software Engineering, zhuangqiubin@allwinnertech.com
+ *
+ * SPDX-License-Identifier:     GPL-2.0-or-later
+ */
+
+#include <sys/types.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include "generated/autoconf.h"
+#include "swupdate.h"
+#include "swupdate_dict.h"
+#include "handler.h"
+#include "util.h"
+
+#include "OTA_BurnBoot.h"
+
+static void awuboot_handler(void);
+static void awboot0_handler(void);
+
+static int install_awboot0(struct img_type *img,
+	void __attribute__ ((__unused__)) *data)
+{
+	int ret;
+	int fdout;
+	FILE *fp;
+	char *buf;
+	char filename[64];
+	struct stat statbuf;
+
+	if (snprintf(filename, sizeof(filename), "%s%s", get_tmpdirscripts(),
+		     img->fname) >= (int)sizeof(filename)) {
+		ERROR("Path too long: %s%s", get_tmpdirscripts(),
+			 img->fname);
+		return -1;
+	}
+
+	ret = stat(filename, &statbuf);
+	if (ret) {
+		fdout = openfileoutput(filename);
+		ret = copyimage(&fdout, img, NULL);
+		close(fdout);
+	}
+
+	ret = OTA_burnboot0(filename);
+	if (ret) {
+		ERROR("OTA_burnboot0 fail, ret is %d\n", ret);
+	}
+
+	return 0;
+}
+
+static int install_awuboot(struct img_type *img,
+	void __attribute__ ((__unused__)) *data)
+{
+	int ret;
+	int fdout;
+	FILE *fp;
+	char *buf;
+	char filename[64];
+	struct stat statbuf;
+
+	if (snprintf(filename, sizeof(filename), "%s%s", get_tmpdirscripts(),
+		     img->fname) >= (int)sizeof(filename)) {
+		ERROR("Path too long: %s%s", get_tmpdirscripts(),
+			 img->fname);
+		return -1;
+	}
+
+	ret = stat(filename, &statbuf);
+	if (ret) {
+		fdout = openfileoutput(filename);
+		ret = copyimage(&fdout, img, NULL);
+		close(fdout);
+	}
+
+	ret = OTA_burnuboot(filename);
+	if (ret) {
+		ERROR("OTA_burnuboot fail, ret is %d\n", ret);
+	}
+
+	return 0;
+}
+
+__attribute__((constructor))
+static void awuboot_handler(void)
+{
+	register_handler("awuboot", install_awuboot, IMAGE_HANDLER, NULL);
+}
+
+__attribute__((constructor))
+static void awboot0_handler(void)
+{
+	register_handler("awboot0", install_awboot0, IMAGE_HANDLER, NULL);
+}
