#ifndef __CVR_RESOURCE_H__
#define __CVR_RESOURCE_H__

#include "CvrInclude.h"
#include <minigui/common.h>
#include <minigui/minigui.h>
#include <minigui/gdi.h>
#include <minigui/window.h>
#include <minigui/control.h>

#define MAJOR_VERSION  "1"
#define MINOR_VERSION  "1"
#define RELEASE_CANDIDATE_VERSION  "2017-09-09"

#define MANUFACTURER	"AllWinner"
#define OTA_VERSION		"X1-V1.0"
//v2.0 rc1
//#define FIRMWARE_VERSION ("db"MAJOR_VERSION"."MINOR_VERSION" tm"RELEASE_CANDIDATE_VERSION)
#define FIRMWARE_VERSION ("F35-V1.0rc3-mov")
//#define FIRMWARE_VERSION ("F35-V1.0rc3-ts")

#define USE_IPS_SCREEN
#define APP_ADAS

#define     VOICE_POWER_ON      "/usr/res/sound/on.wav"			// ø™ª˙…˘“Ù
#define     VOICE_POWER_OFF     "/usr/res/sound/on.wav"			// πÿª˙…˘“Ù
#define     VOICE_TAKE_IMG      "/usr/res/sound/on.wav"			// ≈ƒ’’…˘“Ù
#define     VOICE_TAKE_KEY      "/usr/res/sound/chord.wav"	// ∞¥º¸…˘“Ù
#define     VOICE_TAKE_NULL     "/usr/res/sound/on.wav"			// ∞¥º¸…˘“Ù

#define CVR_KEY_LEFT	SCANCODE_SUNXILEFT		// 0x80
#define CVR_KEY_RIGHT	SCANCODE_SUNXIRIGHT		// 0x81
#define CVR_KEY_MODE	SCANCODE_SUNXIMODE		// 0x83
#define CVR_KEY_OK		SCANCODE_SUNXIOK		// 0x82
#define CVR_KEY_POWER	SCANCODE_SUNXIPOWER		// 0x84
#define CVR_KEY_MENU    SCANCODE_SUNXIMENU

#define MB_HAVE_TITLE			0x00000002
#define MB_HAVE_TEXT			0x00000004

typedef enum {
	WINDOW_RECORD_ID = 0,
	WINDOW_MENU_ID,
	WINDOW_USB_ID,
	WINDOW_HBAR_ID,
	WINDOW_MAIN_ID
}WindowIDType;
#define SelfCtrlWinCnt		4

// self message
typedef enum
{
	MSG_CVR_KEY			= 0x0800,		// MSG_USER==0x0800
	MSG_WIN_RESUME			= 0x0801,
	MSG_WIN_SUSPEND			= 0x0802,
	MSG_LANG_CHANGED		= 0x0803,

	MSG_USB_PLUGIN			= 0x0820,
	MSG_USB_PLUGOUT			= 0x0821,
	MSG_TVIN_PLUGIN			= 0x0822,
	MSG_TVIN_PLUGOUT		= 0x0823,
	MSG_TF_CARD_PLUGIN		= 0x0824,
	MSG_TF_CARD_PLUGOUT		= 0x0825,
	MSG_GSENSOR_HIT			= 0x0826,
	MSG_POWER_LOW			= 0x0827,
	MSG_CARBACK_DET		    = 0x0828,


	MSG_DIALOG_CLOSE_PC	= 0x0840,
	MSG_DIALOG_CLOSE_TIP	= 0x0841,
	MSG_DIALOG_CLOSE_BOX	= 0x0842,
	MSG_DIALOG_CLOSE_SUB    = 0x0843,

	MSG_HBAR_UPDATAE_UVC    = 0x0860,
	MSG_HBAR_UPDATAE_AUDIO  = 0x0861,
	MSG_HBAR_UPDATAE_LABLE3 = 0x0862,
	MSG_HBAR_UPDATAE_RECINFO  = 0x0863,
	MSG_HBAR_UPDATAE_BATLEVEL = 0x0864,
	MSG_HBAR_UPDATAE_TFCARD   = 0x0865,
	MSG_HBAR_UPDATAE_LOCK   = 0x0866,


    MSG_MLM_HILIGHTED_SPACE = 0x0880,
    MSG_MLM_NEW_SELECTED    = 0x0881,
    MSG_MLM_NEW_KEY         = 0x0882,

	PGBM_SETTIME_RANGE		= 0x08A0,
	PGBM_SETCURTIME         = 0x08A1,

	MSG_MAIN_LCD_OFF		= 0x08B0,
}UserMsgType;

enum ResourceID {
	ID_SCREEN	= 0,
	ID_STATUSBAR,
	ID_STATUSBAR_ICON_WINDOWPIC,
	ID_STATUSBAR_LABEL1,
	ID_STATUSBAR_LABEL2,
	ID_STATUSBAR_LABEL_RESERVE,
	ID_STATUSBAR_ICON_AWMD,
	ID_STATUSBAR_ICON_UVC,
	ID_STATUSBAR_ICON_WIFI,
	ID_STATUSBAR_ICON_PARK,
	ID_STATUSBAR_ICON_LOCK,
	ID_STATUSBAR_ICON_TFCARD,
	ID_STATUSBAR_ICON_AUDIO,
	ID_STATUSBAR_ICON_WOND,
	ID_STATUSBAR_ICON_BAT,
	ID_STATUSBAR_ICON_BAT1,
	ID_STATUSBAR_ICON_BAT2,
	ID_MENU_LIST,
	ID_MENU_LIST_MB,
	ID_MENU_LIST_VQ,
	ID_MENU_LIST_PQ,
	ID_MENU_LIST_VTL,
	ID_MENU_LIST_WIFI,
	ID_MENU_LIST_PARK,
	ID_MENU_LIST_ALIGNLINE,
	ID_MENU_LIST_GSENSOR,
	ID_MENU_LIST_IMPACTLEVEL,
	ID_MENU_LIST_FCWSENSITY,
	ID_MENU_LIST_VOICEVOL,
	ID_MENU_LIST_AWMD,
	ID_MENU_LIST_WB,
	ID_MENU_LIST_CONTRAST,
	ID_MENU_LIST_EXPOSURE,
	ID_MENU_LIST_POR,
	ID_MENU_LIST_SS,
	ID_MENU_LIST_SILENTMODE,
	ID_MENU_LIST_DATE,
	ID_MENU_LIST_LANG,
	ID_MENU_LIST_TWM,
	ID_MENU_LIST_LWM,
	ID_MENU_LIST_LICENSE_PLATE_WM,
	ID_MENU_LIST_FORMAT,
	ID_MENU_LIST_FRESET,
	ID_MENU_LIST_SHUTDOWN,
	ID_MENU_LIST_FIRMWARE,
	ID_MENU_LIST_UNFOLD_PIC,
	ID_MENU_LIST_CHECKBOX_PIC,
	ID_MENU_LIST_UNCHECKBOX_PIC,
	ID_SUBMENU,
	ID_SUBMENU_CHOICE_PIC,
	ID_RECORDPREVIEW_IMAGE,
	ID_PLAYBACKPREVIEW_IMAGE,
	ID_PLAYBACKPREVIEW_ICON,
	ID_PLAYBACKPREVIEW_MENU,
	ID_PLAYBACKPREVIEW_MB,
	ID_PLAYBACKPREVIEW_BOTTOMBAR,
	ID_PLAYBACK_ICON,
	ID_PLAYBACK_PGB,
	ID_VOCIE,
	ID_CONNECT2PC,
	ID_WARNNING_MB,
	ID_POWEROFF,
	ID_TIPLABEL,
	ID_PREVIEW_SHOW,
	ID_PREVIEW_PIP,
	ID_SHOWADAS_FUNCTION,
	ID_CARBACK
};

enum menuIndex {
	//MENU_INDEX_PARK,
	//MENU_INDEX_AWMD,
	MENU_INDEX_POR,
	MENU_INDEX_SILENTMODE,
	MENU_INDEX_TWM,
	//MENU_INDEX_ALIGNLINE,
	MENU_INDEX_VQ,
	MENU_INDEX_PQ,
	MENU_INDEX_VTL,
	//MENU_INDEX_GSENSOR,
	MENU_INDEX_IMPACTLEVEL,
	//MENU_INDEX_FCWSENSITY,
	MENU_INDEX_VOICEVOL,
	//MENU_INDEX_WB,
	//MENU_INDEX_CONTRAST,
	//MENU_INDEX_EXPOSURE,
	MENU_INDEX_SS,
	MENU_INDEX_LANG,
	//MENU_INDEX_SHUTDOWN,
	MENU_INDEX_FIRMWARE,
	MENU_INDEX_FORMAT,
	MENU_INDEX_FRESET,
	MENU_INDEX_DATE,
};

/*
enum ColorType{
	COLOR_BGC = 0,
	COLOR_FGC,
	COLOR_FGC_LABEL,
	COLOR_FGC_NUMBER,
	COLOR_BGC_ITEMFOCUS,
	COLOR_BGC_ITEMNORMAL,
	COLOR_MAIN3DBOX,
	COLOR_LINEC_ITEM,
	COLOR_LINEC_TITLE,
	COLOR_STRINGC_NORMAL,
	COLOR_STRINGC_SELECTED,
	COLOR_SCROLLBARC,
	COLOR_VALUEC_NORMAL,
	COLOR_VALUEC_SELECTED,
	COLOR_BORDERC_NORMAL,
	COLOR_BORDERC_SELECTED,
};
*/

enum ColorType{
	COLOR_BGC = 0,
	COLOR_SUB_BGC,
	COLOR_BGC1,
	COLOR_FGC,
	COLOR_FGC_LABEL,
	COLOR_FGC_NUMBER,
	COLOR_BGC_ITEMFOCUS,
	COLOR_BGC_ITEMNORMAL,
	COLOR_MAIN3DBOX,
	COLOR_LINEC_ITEM,
	COLOR_LINEC_TITLE,
	COLOR_STRINGC_NORMAL,
	COLOR_STRINGC_SELECTED,
	COLOR_SCROLLBARC,
	COLOR_VALUEC_NORMAL,
	COLOR_VALUEC_SELECTED,
	COLOR_BORDERC_NORMAL,
	COLOR_BORDERC_SELECTED,
};

enum IntValueType{
	INTVAL_ITEMWIDTH = 0,
	INTVAL_ITEMHEIGHT,
	INTVAL_TITLEHEIGHT,
	INTVAL_HBORDER,
	INTVAL_YEARWIDTH,
	INTVAL_LABELWIDTH,
	INTVAL_NUMBERWIDTH,
	INTVAL_BOXHEIGHT,
	INTVAL_SUBMENU_INDEX,
	INTVAL_SUBMENU_COUNT
};

enum BmpType
{
	BMPTYPE_BASE = 0,
	BMPTYPE_WINDOWPIC_RECORDPREVIEW,
	BMPTYPE_WINDOWPIC_PHOTOGRAPH,
	BMPTYPE_WINDOWPIC_PLAYBACKPREVIEW,
	BMPTYPE_WINDOWPIC_PLAYBACK,
	BMPTYPE_WINDOWPIC_MENU,
	BMPTYPE_UNSELECTED,
	BMPTYPE_SELECTED,
	BMPTYPE_USB_STORAGE_MODEM,
	BMPTYPE_PCCAM_MODEM
};

typedef enum {
	LANG_CN = 0,
	LANG_TW = 2,
	LANG_EN = 1,
	LANG_JPN = 3,
	LANG_KR = 4,
	LANG_RS = 5,
	LANG_ERR
}LANGUAGE;


enum LANG_STRINGS {
	LANG_LABEL_MENU = 0,
	LANG_LABEL_MENU_LICENSE_PLATE_WM,
	LANG_LABEL_MENU_WIFI,
	LANG_LABEL_MENU_PARK,
	LANG_LABEL_MENU_VQ,
	LANG_LABEL_MENU_PQ,
	LANG_LABEL_MENU_VTL,
	LANG_LABEL_MENU_IDD,
	LANG_LABEL_MENU_IDR,
	LANG_LABEL_MENU_VOICEVOL,
	LANG_LABEL_MENU_WB,
	LANG_LABEL_MENU_CONTRAST,
	LANG_LABEL_MENU_EXPOSURE,
	LANG_LABEL_MENU_POR,
	LANG_LABEL_MENU_SS,
	LANG_LABEL_MENU_SILENTMODE,
	LANG_LABEL_MENU_DATE,
	LANG_LABEL_MENU_LANG,
	LANG_LABEL_MENU_TWM,
	LANG_LABEL_MENU_FORMAT,
	LANG_LABEL_MENU_FRESET,
	LANG_LABEL_MENU_AWMD,
	LANG_LABEL_MENU_FIRMWARE,

	#ifdef APP_ADAS
	LANG_LABEL_MENU_SMARTALGORITHM,
	#endif

	LANG_LABEL_MENU_ALIGNLINE,
	LANG_LABEL_MENU_GSENSOR,
	LANG_LABEL_MENU_IMPACTLEVEL,
	LANG_LABEL_MENU_FCWSENSITY,
	LANG_LABEL_MENU_SHUTDOWN,
	LANG_LABEL_SUBMENU_LANG_TITLE,
	LANG_LABEL_SUBMENU_LANG_CONTENT0,
	LANG_LABEL_SUBMENU_LANG_CONTENT1,
	LANG_LABEL_SUBMENU_LANG_CONTENT2,
	LANG_LABEL_SUBMENU_LANG_CONTENT3,
	LANG_LABEL_SUBMENU_LANG_CONTENT4,
	LANG_LABEL_SUBMENU_LANG_CONTENT5,
	LANG_LABEL_SUBMENU_VQ_TITLE,
	LANG_LABEL_SUBMENU_VQ_CONTENT0,
	LANG_LABEL_SUBMENU_VQ_CONTENT1,
	LANG_LABEL_SUBMENU_PQ_TITLE,
	LANG_LABEL_SUBMENU_PQ_CONTENT0,
	LANG_LABEL_SUBMENU_PQ_CONTENT1,
	LANG_LABEL_SUBMENU_PQ_CONTENT2,
	LANG_LABEL_SUBMENU_PQ_CONTENT3,
	LANG_LABEL_SUBMENU_VTL_TITLE,
	LANG_LABEL_SUBMENU_VTL_CONTENT0,
	LANG_LABEL_SUBMENU_VTL_CONTENT1,
	LANG_LABEL_SUBMENU_VTL_CONTENT2,
	LANG_LABEL_SUBMENU_WB_TITLE,
	LANG_LABEL_SUBMENU_WB_CONTENT0,
	LANG_LABEL_SUBMENU_WB_CONTENT1,
	LANG_LABEL_SUBMENU_WB_CONTENT2,
	LANG_LABEL_SUBMENU_WB_CONTENT3,
	LANG_LABEL_SUBMENU_WB_CONTENT4,
	LANG_LABEL_SUBMENU_CONTRAST_TITLE,
	LANG_LABEL_SUBMENU_CONTRAST_CONTENT0,
	LANG_LABEL_SUBMENU_CONTRAST_CONTENT1,
	LANG_LABEL_SUBMENU_CONTRAST_CONTENT2,
	LANG_LABEL_SUBMENU_CONTRAST_CONTENT3,
	LANG_LABEL_SUBMENU_CONTRAST_CONTENT4,
	LANG_LABEL_SUBMENU_CONTRAST_CONTENT5,
	LANG_LABEL_SUBMENU_EXPOSURE_TITLE,
	LANG_LABEL_SUBMENU_EXPOSURE_CONTENT0,
	LANG_LABEL_SUBMENU_EXPOSURE_CONTENT1,
	LANG_LABEL_SUBMENU_EXPOSURE_CONTENT2,
	LANG_LABEL_SUBMENU_EXPOSURE_CONTENT3,
	LANG_LABEL_SUBMENU_EXPOSURE_CONTENT4,
	LANG_LABEL_SUBMENU_EXPOSURE_CONTENT5,
	LANG_LABEL_SUBMENU_EXPOSURE_CONTENT6,
	LANG_LABEL_SUBMENU_SS_TITLE,
	LANG_LABEL_SUBMENU_SS_CONTENT0,
	LANG_LABEL_SUBMENU_SS_CONTENT1,
	LANG_LABEL_SUBMENU_SS_CONTENT2,
	LANG_LABEL_SUBMENU_SS_CONTENT3,
	LANG_LABEL_SUBMENU_OK,
	LANG_LABEL_SUBMENU_CANCEL,
	LANG_LABEL_SUBMENU_FORMAT_TITLE,
	LANG_LABEL_SUBMENU_FORMAT_TEXT,
	LANG_LABEL_SUBMENU_FORMATTING_TEXT,
	LANG_LABEL_SUBMENU_FRESET_TITLE,
	LANG_LABEL_SUBMENU_FRESET_TEXT,
	LANG_LABEL_SUBMENU_GSENSOR_TITLE,
	LANG_LABEL_SUBMENU_GSENSOR_CONTENT0,
	LANG_LABEL_SUBMENU_GSENSOR_CONTENT1,
	LANG_LABEL_SUBMENU_GSENSOR_CONTENT2,
	LANG_LABEL_SUBMENU_IMPACTLEVEL_TITLE,
	LANG_LABEL_SUBMENU_IMPACTLEVEL_CONTENT0,
	LANG_LABEL_SUBMENU_IMPACTLEVEL_CONTENT1,
	LANG_LABEL_SUBMENU_IMPACTLEVEL_CONTENT2,
	LANG_LABEL_SUBMENU_FCWSENSITY_TITLE,
	LANG_LABEL_SUBMENU_FCWSENSITY_CONTENT0,
	LANG_LABEL_SUBMENU_FCWSENSITY_CONTENT1,
	LANG_LABEL_SUBMENU_FCWSENSITY_CONTENT2,
	LANG_LABEL_SUBMENU_VOICEVOL_TITLE,
	LANG_LABEL_SUBMENU_VOICEVOL_CONTENT0,
	LANG_LABEL_SUBMENU_VOICEVOL_CONTENT1,
	LANG_LABEL_SUBMENU_VOICEVOL_CONTENT2,
	LANG_LABEL_SUBMENU_SHUTDOWN_TITLE,
	LANG_LABEL_SUBMENU_SHUTDOWN_CONTENT0,
	LANG_LABEL_SUBMENU_SHUTDOWN_CONTENT1,
	LANG_LABEL_SUBMENU_SHUTDOWN_CONTENT2,
	LANG_LABEL_SUBMENU_SHUTDOWN_CONTENT3,
	LANG_LABEL_SUBMENU_SMARTALGORITHM_TITLE,
	LANG_LABEL_SUBMENU_SMARTALGORITHM_CONTENT0,
	LANG_LABEL_SUBMENU_SMARTALGORITHM_CONTENT1,
	LANG_LABEL_SUBMENU_SMARTALGORITHM_CONTENT2,
	LANG_LABEL_SUBMENU_SMARTALGORITHM_CONTENT3,
	LANG_LABEL_SCREEN_SHOT,
	LANG_LABEL_WARNING,
	LANG_LABEL_TIPS,
	LANG_LABEL_NO_TFCARD,
	LANG_LABEL_TFCARD_FULL,
	LANG_LABEL_TFCARD_FULL1,
	LANG_LABEL_FORMATTING,
	LANG_LABEL_DATE_TITLE,
	LANG_LABEL_DATE_YEAR,
	LANG_LABEL_DATE_MONTH,
	LANG_LABEL_DATE_DAY,
	LANG_LABEL_DATE_HOUR,
	LANG_LABEL_DATE_MINUTE,
	LANG_LABEL_DATE_SECOND,
	LANG_LABEL_DELETEFILE_TITLE,
	LANG_LABEL_DELETEFILE_TEXT,
	LANG_LABEL_SHUTDOWN_TITLE,
	LANG_LABEL_SHUTDOWN_TEXT,
	LANG_LABEL_OPEN_USB_STORAGE_DEVICE,
	LANG_LABEL_CLOSE_USB_STORAGE_DEVICE,
	LANG_LABEL_CHARGE_MODE,
	LANG_LABEL_LOW_POWER_SHUTDOWN,
	LANG_LABEL_10S_SHUTDOWN,
	LANG_LABEL_SHUTDOWN_NOW,
	LANG_LABEL_30S_NOWORK_SHUTDOWN,
	LANG_LABEL_PLAYBACK_FAIL,
	LANG_LABEL_FILELIST_EMPTY,
	LANG_LABEL_SOS_WARNING,
	LANG_LABEL_WIFI_CONNECT,
	LANG_LABEL_IMPACT_NUM,
	LANG_LABEL_OTA_UPDATE,
	LANG_LABEL_TAKE_PICTURE,
	LANG_LABEL_FORMAT_SDCARD,
	LANG_LABEL_OPEN_PCCAM,
	LANG_LABEL_LICENSE_PLATE_NUMBERS_CN,
	LANG_LABEL_LICENSE_PLATE_NUMBERS_EN,
	LANG_LABEL_INVAILD_TFCATD,
	LANG_LABEL_MAX,
};

typedef struct FirmwareInfo{
	char product_type[32] ;
	char software_version[32] ;
	char updated[32] ;
} FirmwareInfo;

typedef struct
{
	bool park_en;           //Õ£≥µº‡øÿ
	bool motion_detect;     //“∆∂Ø’Ï≤‚
	bool pwr_record_en;		// ø™ª˙¬ºœÒ
	bool voice_en;			// æ≤“Ù
	bool time_water_en;		//  ±º‰ÀÆ”°

	s32 language;			// ”Ô—‘
	s32 video_quality;		// ¬ºœÒ÷ ¡ø
	s32 photo_quality;		// ≈ƒ’’÷ ¡ø
	s32 video_time;			// ¬ºœÒ ±≥§
	s32 white_balance;		// ∞◊∆Ω∫‚
	s32 cam_contrast;		// ∂‘±»∂»
	s32 cam_exposure;		// ∆ÿπ‚∂»
	s32 gsensor_level;		// gsensor¡È√Ù∂»
	s32 voice_volume;		// “Ù¡ø
	s32 auto_pwroff;        // ◊‘∂Øπÿª˙
	s32 screen_switch;		// ◊‘∂Øπÿ∆¡
}UserDataType;

void ResourceInit(void);
void ResourceUninit(void);
int initStage1(void);
int initStage2(void);
int initStage3(void);
void setHwnd(unsigned int win_id, HWND hwnd);
void resetResource(void);
int GetUserData(UserDataType *config);
int sessionControl(int sid, int cmd, char* buf, void *srv);
int setRecordingStatus(bool recording);
int getResVTLms(void);
BITMAP *getNoVideoImage();
void getFirmwareInfo(FirmwareInfo *fwInfo);

int getResRect(enum ResourceID resID, CvrRectType *rect);
gal_pixel getResColor(enum ResourceID resID, enum ColorType type);
int getResBmp(enum ResourceID resID, enum BmpType type, BITMAP *bmp);
int loadBmpFromConfig(const char* pSection, const char* pKey, PBITMAP bmp);
int getResBmpSubMenuCheckbox(enum ResourceID resID, bool isHilight, BITMAP *bmp);
void unloadBitMap(BITMAP *bmp);

int setResIntValue(enum ResourceID resID, enum IntValueType type, int value);
int getResIntValue(enum ResourceID resID, enum IntValueType type);

int setResBoolValue(enum ResourceID resID, bool value);
bool getResBoolValue(enum ResourceID resID);
void setCurrentIconValue(enum ResourceID resID, int cur_val);

const char* getResMenuItemString(enum ResourceID resID);
const char* getResSubMenuCurString(enum ResourceID resID);
const char* getResSubMenuTitle(enum ResourceID resID);

enum ResourceID GetResourceID(u32 nIndex);
int initLangAndFont(void);
LANGUAGE getLanguage(void);
PLOGFONT getLogFont(void);
const char* getLabel(unsigned int labelIndex);

#endif