Index: src/util-linux/mkfs_vfat.c
===================================================================
--- src.orig/util-linux/mkfs_vfat.c
+++ src/util-linux/mkfs_vfat.c
@@ -9,16 +9,17 @@
  */

 //usage:#define mkfs_vfat_trivial_usage
-//usage:       "[-v] [-n LABEL] BLOCKDEV [KBYTES]"
+//usage:       "[-v] [-s sectors-per-cluster] [-n LABEL] BLOCKDEV [KBYTES]"
 /* Accepted but ignored:
        "[-c] [-C] [-I] [-l bad-block-file] [-b backup-boot-sector] "
        "[-m boot-msg-file] [-i volume-id] "
-       "[-s sectors-per-cluster] [-S logical-sector-size] [-f number-of-FATs] "
+       "[-S logical-sector-size] [-f number-of-FATs] "
        "[-h hidden-sectors] [-F fat-size] [-r root-dir-entries] [-R reserved-sectors] "
 */
 //usage:#define mkfs_vfat_full_usage "\n\n"
 //usage:       "Make a FAT32 filesystem\n"
 /* //usage:  "\n	-c	Check device for bad blocks" */
+//usage:     "\n	-s	Sector per cluster"
 //usage:     "\n	-v	Verbose"
 /* //usage:  "\n	-I	Allow to use entire disk device (e.g. /dev/hda)" */
 //usage:     "\n	-n LBL	Volume label"
@@ -227,7 +228,8 @@ int mkfs_vfat_main(int argc UNUSED_PARAM
	unsigned opts;
	uint16_t sect_per_track;
	uint8_t media_byte;
-	uint8_t sect_per_clust;
+	const char *str_sect_per_clust = "";
+	uint8_t sect_per_clust = 1;
	uint8_t heads;
	enum {
		OPT_A = 1 << 0,  // [IGNORED] atari format
@@ -252,9 +254,25 @@ int mkfs_vfat_main(int argc UNUSED_PARAM
	opt_complementary = "-1";//:b+:f+:F+:h+:r+:R+:s+:S+:vv:c--l:l--c";
	opts = getopt32(argv, "Ab:cCf:F:h:Ii:l:m:n:r:R:s:S:v",
		NULL, NULL, NULL, NULL, NULL,
-		NULL, NULL, &volume_label, NULL, NULL, NULL, NULL);
+		NULL, NULL, &volume_label, NULL, NULL, &str_sect_per_clust, NULL);
	argv += optind;

+	if (opts & OPT_s) {
+		char *tmp;
+		sect_per_clust = (int)strtol(str_sect_per_clust, &tmp, 0);
+		if (*tmp || (sect_per_clust != 1
+			&& sect_per_clust != 2
+			&& sect_per_clust != 4
+			&& sect_per_clust != 8
+			&& sect_per_clust != 16
+			&& sect_per_clust != 32
+			&& sect_per_clust != 64
+			&& sect_per_clust != 128)) {
+			fprintf(stderr, "Bad number of sectors per cluster : %s\n", str_sect_per_clust);
+			return 22;
+		}
+	}
+
	// cache device name
	device_name = argv[0];
	// default volume ID = creation time
@@ -309,7 +327,6 @@ int mkfs_vfat_main(int argc UNUSED_PARAM
	media_byte = 0xf8;
	heads = 255;
	sect_per_track = 63;
-	sect_per_clust = 1;
	{
		struct hd_geometry geometry;
		// size (in sectors), sect (per track), head
@@ -332,18 +349,20 @@ int mkfs_vfat_main(int argc UNUSED_PARAM
			 * fs size <=  16G: 8k clusters
			 * fs size >   16G: 16k clusters
			 */
-			sect_per_clust = 1;
-			if (volume_size_bytes >= 260*1024*1024) {
-				sect_per_clust = 8;
-				/* fight gcc: */
-				/* "error: integer overflow in expression" */
-				/* "error: right shift count >= width of type" */
-				if (sizeof(off_t) > 4) {
-					unsigned t = (volume_size_bytes >> 31 >> 1);
-					if (t >= 8/4)
-						sect_per_clust = 16;
-					if (t >= 16/4)
-						sect_per_clust = 32;
+			if (!(OPT_s & opts)) {
+				sect_per_clust = 1;
+				if (volume_size_bytes >= 260*1024*1024) {
+					sect_per_clust = 8;
+					/* fight gcc: */
+					/* "error: integer overflow in expression" */
+					/* "error: right shift count >= width of type" */
+					if (sizeof(off_t) > 4) {
+						unsigned t = (volume_size_bytes >> 31 >> 1);
+						if (t >= 8/4)
+							sect_per_clust = 16;
+						if (t >= 16/4)
+							sect_per_clust = 32;
+					}
				}
			}
		} else {
