Index: busybox-1.24.1/init/halt.c
===================================================================
--- busybox-1.24.1.orig/init/halt.c	2015-07-13 10:18:47.000000000 +0800
+++ busybox-1.24.1/init/halt.c	2016-03-31 10:51:12.879960653 +0800
@@ -68,6 +68,146 @@

 #include "libbb.h"
 #include "reboot.h"
+#define LOGE(...) fprintf(stderr, "E:" __VA_ARGS__)
+
+/* Bootloader Message
+ */
+struct bootloader_message {
+	char command[32];
+	char status[32];
+	char version[32];
+	//char recovery[1024];
+};
+
+static const char *MISC_DEVICE = "/dev/by-name/misc";
+// ------------------------------------
+// for misc partitions on block devices
+// ------------------------------------
+
+static int get_mtd_partition_index_byname(const char* name)
+{
+	char * line = NULL;
+	size_t len = 0;
+	ssize_t read;
+	int index = 0;
+	FILE* fp;
+	fp = fopen("/proc/mtd","r");
+	if(fp == NULL){
+		LOGE("open /proc/mtd failed(%s)\n",strerror(errno));
+		return -1;
+	}
+	while ((read = getline(&line, &len, fp)) != -1) {
+		if( strstr(line,name) == NULL )
+			continue;
+		index = line[3] - '0';
+		break;
+	}
+	free(line);
+	return index;
+}
+static int is_mmc_or_mtd(void)
+{
+	int part_index = 0;
+	int is_mtd = access("/dev/mtd0", F_OK); //mode:F_OK
+	if(is_mtd == -1)
+		return 0; //mmc
+	part_index = get_mtd_partition_index_byname("misc");
+	return part_index;//mtd
+}
+
+static int get_bootloader_message_block(struct bootloader_message *out,
+                                 const char* misc)
+{
+	char device[50];
+	FILE* f;
+	int count;
+	struct bootloader_message temp;
+	int id = is_mmc_or_mtd();
+	if(id == 0){
+		strcpy(device,misc);
+	}
+	else{
+		sprintf(device,"/dev/mtd%d",id);
+	}
+
+	f = fopen(device, "rb");
+	if (f == NULL) {
+		LOGE("Can't open %s\n(%s)\n", device, strerror(errno));
+		return -1;
+	}
+
+	count = fread(&temp, sizeof(temp), 1, f);
+	if (count != 1) {
+		LOGE("Failed reading %s\n(%s)\n", device, strerror(errno));
+		return -1;
+	}
+	if (fclose(f) != 0) {
+		LOGE("Failed closing %s\n(%s)\n", device, strerror(errno));
+		return -1;
+	}
+	memcpy(out, &temp, sizeof(temp));
+	return 0;
+}
+
+static int set_bootloader_message_block(const struct bootloader_message *in,
+                                 const char* misc)
+{
+	char device[50];
+	FILE* f;
+	int count;
+	int id = is_mmc_or_mtd();
+	if(id == 0){
+		strcpy(device,misc);
+	}
+	else{
+		sprintf(device,"/dev/mtd%d",id);
+		system("mtd erase misc");
+	}
+
+	f = fopen(device,"wb");
+	if (f == NULL) {
+		LOGE("Can't open %s\n(%s)\n", device, strerror(errno));
+		return -1;
+	}
+	count = fwrite(in, sizeof(*in), 1, f);
+	if (count != 1) {
+		LOGE("Failed writing %s\n(%s)\n", device, strerror(errno));
+		return -1;
+	}
+	fflush(f);
+	if (fclose(f) != 0) {
+		LOGE("Failed closing %s\n(%s)\n", device, strerror(errno));
+		return -1;
+	}
+	return 0;
+}
+/* force the next boot to recovery/efex */
+static int write_misc(const char *reason){
+
+	struct bootloader_message boot, temp;
+	if(strcmp(reason,"efex") != 0){
+		return 0;
+	}
+
+	memset(&boot, 0, sizeof(boot));
+	//if(!strcmp("recovery",reason)){
+	//	reason = "boot-recovery";
+	//}
+	//strcpy(boot.command, "boot-recovery");
+	strcpy(boot.command,reason);
+	if (set_bootloader_message_block(&boot, MISC_DEVICE) )
+		return -1;
+
+	//read for compare
+	memset(&temp, 0, sizeof(temp));
+	if (get_bootloader_message_block(&temp, MISC_DEVICE))
+		return -1;
+
+	if( memcmp(&boot, &temp, sizeof(boot)) )
+		return -1;
+
+	return 0;
+}

 #if ENABLE_FEATURE_WTMP
 #include <sys/utsname.h>
@@ -107,6 +247,12 @@

	int delay = 0;
	int which, flags, rc;
+	int argc_index = 0;
+
+	for(argc_index = 0; argc_index < argc; argc_index++) {
+		if(strcmp(argv[argc_index],"efex") == 0)
+		write_misc("efex");
+	}

	/* Figure out which applet we're running */
	for (which = 0; "hpr"[which] != applet_name[0]; which++)
