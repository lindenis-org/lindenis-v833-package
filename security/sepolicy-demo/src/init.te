# init is its own domain.
type init, domain, mlstrustedsubject;

# permissive init;

#tmpfs_domain(init)
allow init tmpfs:file { read write create open rename ioctl };

relabelto_domain(init)

# The init domain is entered by execing init.
type init_exec, exec_type, file_type;

# /dev/__null__ node created by init.
allow init tmpfs:chr_file create_file_perms;


allow init exec_type:{lnk_file file} { getattr open read execute };

allow init {init_exec mount_exec temp_exec etc_initd}:file {read execute execute_no_trans open execmod };
allow init etc_initd:dir read;
allow init etc_initd:file ioctl;

allow init self:netlink_kobject_uevent_socket *;
#
# init direct restorecon calls.
#
# /dev/socket
allow init { device socket_device }:dir { relabelto read };
allow init dev_type:{ dir chr_file lnk_file blk_file } relabelfrom;
allow init dev_type:{ dir chr_file lnk_file blk_file } relabelto;
allow init dev_type:chr_file getattr;

allow init  mmc_device:blk_file { rw_file_perms setattr };

allow init kmsg_device:chr_file { w_file_perms ioctl };
allow init serial_device:chr_file { w_file_perms ioctl };
allow init kernel:system syslog_read;
# setrlimit
allow init self:capability sys_resource;
allow init self:capability sys_admin;

# Access fs:dir.
allow init devpts:dir { create mounton relabelfrom };

# Access fs:chr_file.
allow init tmpfs:chr_file { read write open relabelfrom getattr};

allow init devpts:chr_file { read write open relabelfrom getattr};

# Access fs:file.
allow init tmpfs:file { unlink lock write read relabelfrom };
allow init tmpfs:sock_file create_file_perms;
allow init tmpfs:lnk_file create_file_perms;

# allow init {fs_type file_type}:{dir lnk_file file} relabelto;

# Access /dev/console.
allow init console_device:chr_file rw_file_perms;

# Access /dev/tty0.
allow init tty_device:chr_file rw_file_perms;

# Call mount(2).
allow init self:capability sys_admin;

# Create and mount on directories in /.
allow init rootfs:dir create_dir_perms;
#allow init { rootfs cache_file cgroup system_data_file system_file }:dir mounton;
allow init { rootfs cgroup system_data_file system_file tee_data_file }:dir mounton;
allow init rootfs:chr_file rw_file_perms;

# Mount on /dev/usb-ffs/adb.
allow init device:dir mounton;

# Create and remove symlinks in /.
allow init rootfs:lnk_file { create unlink };

# Create and remove symlinks in /.
allow init system_file:lnk_file { create unlink };

# Mount debugfs on /sys/kernel/debug.
allow init sysfs:dir mounton;

# Create cgroups mount points in tmpfs and mount cgroups on them.
allow init tmpfs:dir create_dir_perms;
allow init tmpfs:dir mounton;
allow init cgroup:dir create_dir_perms;
allow init cpuctl_device:dir { create mounton };

allow init storage_file:dir mounton;

# /config
allow init configfs:dir mounton;
allow init configfs:dir create_dir_perms;
allow init configfs:file create_file_perms;
allow init configfs:lnk_file create_file_perms;

# Use tmpfs as /data, used for booting when /data is encrypted
allow init tmpfs:dir relabelfrom;

# Create directories under /dev/cpuctl after chowning it to system.
allow init self:capability dac_override;

# Set system clock.
allow init self:capability sys_time;

allow init self:capability { sys_rawio mknod };

# Mounting filesystems from block devices.
allow init dev_type:{blk_file lnk_file} rw_file_perms;

# Mounting filesystems.
# Only allow relabelto for types used in context= mount options,
# which should all be assigned the contextmount_type attribute.
# This can be done in device-specific policy via type or typeattribute
# declarations.
allow init fs_type:filesystem ~relabelto;
allow init unlabeled:filesystem ~relabelto;

# restorecon /adb_keys or any other rootfs files and directories to a more
# specific type.
allow init rootfs:{ dir file } relabelfrom;

# mkdir, symlink, write, rm/rmdir, chown/chmod, restorecon/restorecon_recursive from init.rc files.
# chown/chmod require open+read+setattr required for open()+fchown/fchmod().
# system/core/init.rc requires at least cache_file and data_file_type.
# init.<board>.rc files often include device-specific types, so
# we just allow all file types except /system files here.
allow init self:capability { chown fowner fsetid };
allow init {file_type -app_data_file}:dir { create search getattr open read setattr ioctl };
allow init {file_type -shell_data_file }:dir { write add_name remove_name rmdir relabelfrom };
allow init {file_type -shell_data_file }:file { create getattr open read write setattr relabelfrom unlink };
allow init {file_type -shell_data_file }:{ sock_file fifo_file } { create getattr open read setattr relabelfrom unlink };
allow init {file_type -shell_data_file }:lnk_file { create getattr setattr relabelfrom unlink };
allow init file_type:dir_file_class_set relabelto;
allow init sysfs:{ dir file lnk_file } { getattr relabelfrom };
allow init sysfs_type:{ dir file lnk_file } relabelto;
allow init dev_type:dir create_dir_perms;
allow init dev_type:lnk_file create;

# chown/chmod on pseudo files.
allow init { fs_type -sdcard_type -rootfs }:file { open read setattr };
allow init { fs_type -sdcard_type -rootfs }:dir  { open read setattr search };

# chown/chmod on devices.
allow init { dev_type }:chr_file { read open write ioctl setattr relabelto};

# Unlabeled file access for upgrades from 4.2.
allow init unlabeled:dir { create_dir_perms relabelfrom mounton };
allow init unlabeled:notdevfile_class_set { create_file_perms relabelfrom };

# Create /data/security from init.rc post-fs-data.
allow init security_file:dir { create setattr };

# Reload policy upon setprop selinux.reload_policy 1.
# Note: this requires the following allow rule
allow init kernel:security load_policy;
# which can be configured on a device-by-device basis if needed.
r_dir_file(init, security_file)

# Any operation that can modify the kernel ring buffer, e.g. clear
# or a read that consumes the messages that were read.
allow init kernel:system syslog_mod;
allow init kernel:system module_request;
allow init self:capability2 { syslog mac_admin block_suspend };

# Set usermodehelpers and /proc security settings.
allow init usermodehelper:file rw_file_perms;
allow init proc_security:file rw_file_perms;

# Write to /proc/sys/kernel/panic_on_oops.
allow init proc:file w_file_perms;
allow init proc:dir mounton;

# Write to /proc/sys/net/ping_group_range and other /proc/sys/net files.
allow init proc_net:file w_file_perms;
allow init self:capability net_admin;

# Write to /proc/sysrq-trigger.
# allow init proc_sysrq:file w_file_perms;

# Reboot.
allow init self:capability sys_boot;

# Write to sysfs nodes.
allow init sysfs_type:dir r_dir_perms;
allow init sysfs_type:file w_file_perms;

# disksize
#allow init sysfs_zram:file getattr;

# Transitions to seclabel processes in init.rc
# domain_trans(init, rootfs, adbd)
# domain_trans(init, rootfs, healthd)
# domain_trans(init, rootfs, slideshow)
domain_trans(init, shell_exec, shell)
# domain_trans(init, init_exec, ueventd)
# domain_trans(init, init_exec, watchdogd)
allow init init_exec:file execute_no_trans;

# Support "adb shell stop"
allow init self:capability kill;
allow init domain:process { sigkill signal signull };

# Init creates /data/local/tmp at boot
allow init shell_data_file:dir { open create read getattr setattr search };
allow init shell_data_file:file { getattr };

# Set UID and GID for services.
allow init self:capability { setuid setgid };

# For bootchart to read the /proc/$pid/cmdline file of each process,
# we need to have following line to allow init to have access
# to different domains.
r_dir_file(init, domain)

# Use setexeccon(), setfscreatecon(), and setsockcreatecon().
# setexec is for services with seclabel options.
# setfscreate is for labeling directories and socket files.
# setsockcreate is for labeling local/unix domain sockets.
allow init self:process { setexec setfscreate setsockcreate };

# Perform SELinux access checks on setting properties.
selinux_check_access(init)

# Ask the kernel for the new context on services to label their sockets.
allow init kernel:security compute_create;

# Create sockets for the services.
allow init domain:unix_stream_socket { create bind };
allow init domain:unix_dgram_socket { create bind };

allow init logd:unix_dgram_socket sendto;
allow init ubusd:unix_stream_socket connectto;


# Set any property.
allow init property_type:property_service set;

# Run "ifup lo" to bring up the localhost interface
allow init self:udp_socket { create ioctl };
allow init self:capability net_raw;

# This line seems suspect, as it should not really need to
# set scheduling parameters for a kernel domain task.
allow init kernel:process setsched;


# Create and access /dev files without a specific type,
# e.g. /dev/.coldboot_done, /dev/.booting
# TODO:  Move these files into their own type unless they are
# only ever accessed by init.
allow init device:file create_file_perms;
allow init device:chr_file { relabelto relabelfrom };

allow init device:sock_file write;

# Access character devices without a specific type,
# e.g. /dev/keychord.
# TODO: Move these devices into their own type unless they
# are only ever accessed by init.
allow init device:chr_file { rw_file_perms setattr };

# keychord configuration
allow init self:capability sys_tty_config;

# Read /sys/fs/pstore/console-ramoops to detect restarts caused
# by dm-verity detecting corrupted blocks
#allow init pstorefs:dir search;
#allow init pstorefs:file r_file_perms;
allow init kernel:system syslog_read;

# linux keyring configuration
allow init init:key { write search setattr };
allow init self:process {setcurrent dyntransition};

allow init domain:process getattr;

###
### neverallow rules
###

# The init domain is only entered via setcon from the kernel domain,
# never via an exec-based transition.
neverallow { domain -kernel -init} init:process dyntransition;
neverallow { domain -kernel -init} init:process transition;
neverallow init { file_type fs_type -init_exec }:file entrypoint;

# Never read/follow symlinks created by shell or untrusted apps.
neverallow init shell_data_file:lnk_file read;
neverallow init app_data_file:lnk_file read;

# init should never execute a program without changing to another domain.
neverallow init { file_type fs_type -init_exec -mount_exec -temp_exec -etc_initd}:file execute_no_trans;

# Init never adds or uses services via service_manager.
#neverallow init service_manager_type:service_manager { add find };
#neverallow init servicemanager:service_manager list;

# Init should not be creating subdirectories in /data/local/tmp
neverallow init shell_data_file:dir { write add_name remove_name };
