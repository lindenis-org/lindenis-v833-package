#ifndef __HOMEAPPLICANCES_H__
#define __HOMEAPPLICANCES_H__
#include <sys/stat.h>
#include <sys/epoll.h>
#include "ms_common.h"

#define MAX_UART_LEN 255
enum {
/*01*/	LOCAL_CMD_OPEN=0x01,
/*02*/	LOCAL_CMD_CLOSE,
/*03*/	LOCAL_CMD_VOL_ADD,
/*04*/	LOCAL_CMD_VOL_DEC,
/*05*/	LOCAL_CMD_VOL_MAX,
/*06*/	LOCAL_CMD_VOL_MIN,
	LOCAL_CMD_WIND_SPEED_1,
	LOCAL_CMD_WIND_SPEED_20,
	LOCAL_CMD_WIND_SPEED_40,
	LOCAL_CMD_WIND_SPEED_60,
	LOCAL_CMD_WIND_SPEED_80,
	LOCAL_CMD_WIND_SPEED_100,
	LOCAL_CMD_WIND_SPEED_MIN,
	LOCAL_CMD_WIND_SPEED_MID,
	LOCAL_CMD_WIND_SPEED_MAX,
	LOCAL_CMD_WIND_SPEED_AUTO,
	LOCAL_CMD_TEMP_17,
	LOCAL_CMD_TEMP_18,
	LOCAL_CMD_TEMP_19,
	LOCAL_CMD_TEMP_20,
	LOCAL_CMD_TEMP_21,
	LOCAL_CMD_TEMP_22,
	LOCAL_CMD_TEMP_23,
	LOCAL_CMD_TEMP_24,
	LOCAL_CMD_TEMP_25,
	LOCAL_CMD_TEMP_26,
	LOCAL_CMD_TEMP_27,
	LOCAL_CMD_TEMP_28,
	LOCAL_CMD_TEMP_29,
	LOCAL_CMD_TEMP_30,
	LOCAL_CMD_TEMP_17_5,
	LOCAL_CMD_TEMP_18_5,
	LOCAL_CMD_TEMP_19_5,
	LOCAL_CMD_TEMP_20_5,
	LOCAL_CMD_TEMP_21_5,
	LOCAL_CMD_TEMP_22_5,
	LOCAL_CMD_TEMP_23_5,
	LOCAL_CMD_TEMP_24_5,
	LOCAL_CMD_TEMP_25_5,
	LOCAL_CMD_TEMP_26_5,
	LOCAL_CMD_TEMP_27_5,
	LOCAL_CMD_TEMP_28_5,
	LOCAL_CMD_TEMP_29_5,
	LOCAL_CMD_AUTO_MODE,
	LOCAL_CMD_COOL_MODE,
	LOCAL_CMD_HEAT_MODE,
	LOCAL_CMD_FAN_MODE,
	LOCAL_CMD_DRY_MODE,
	LOCAL_CMD_WIND_SWING_LR_OPEN,
	LOCAL_CMD_WIND_SWING_LR_CLOSE,
	LOCAL_CMD_WIND_SWING_UD_OPEN,
	LOCAL_CMD_WIND_SWING_UD_CLOSE,
	LOCAL_CMD_CANCLE_POWER_OFF_TIMER,
	LOCAL_CMD_CANCLE_POWER_ON_TIMER,
	LOCAL_CMD_POWER_ON_TIMER_30M,
	LOCAL_CMD_POWER_ON_TIMER_1H,
	LOCAL_CMD_POWER_ON_TIMER_2H,
	LOCAL_CMD_POWER_ON_TIMER_3H,
	LOCAL_CMD_POWER_ON_TIMER_4H,
	LOCAL_CMD_POWER_ON_TIMER_5H,
	LOCAL_CMD_POWER_ON_TIMER_6H,
	LOCAL_CMD_POWER_ON_TIMER_7H,
	LOCAL_CMD_POWER_ON_TIMER_8H,
	LOCAL_CMD_POWER_OFF_TIMER_30M,
	LOCAL_CMD_POWER_OFF_TIMER_1H,
	LOCAL_CMD_POWER_OFF_TIMER_2H,
	LOCAL_CMD_POWER_OFF_TIMER_3H,
	LOCAL_CMD_POWER_OFF_TIMER_4H,
	LOCAL_CMD_POWER_OFF_TIMER_5H,
	LOCAL_CMD_POWER_OFF_TIMER_6H,
	LOCAL_CMD_POWER_OFF_TIMER_7H,
	LOCAL_CMD_POWER_OFF_TIMER_8H,
	LOCAL_CMD_SELF_CLEAN,
	LOCAL_CMD_CANCLE_SELF_CLEAN,
	LOCAL_CMD_PTC_OPEN,
	LOCAL_CMD_PTC_CLOSE,
	LOCAL_CMD_WIND_STRAIGHT_OPEN,
	LOCAL_CMD_WIND_STRAIGHT_CLOSE,
	LOCAL_CMD_WIND_AVOID_OPEN,
	LOCAL_CMD_WIND_AVOID_CLOSE,
	LOCAL_CMD_INTELLIGENT_WIND_OPEN,
	LOCAL_CMD_INTELLIGENT_WIND_CLOSE,
	LOCAL_CMD_NO_WIND_SENSE_UPPER_OPEN,
	LOCAL_CMD_NO_WIND_SENSE_UPPER_CLOSE,
	LOCAL_CMD_NO_WIND_SENSE_UNDER_OPEN,
	LOCAL_CMD_NO_WIND_SENSE_UNDER_CLOSE,
	LOCAL_CMD_NO_WIND_SENSE_OPEN,
	LOCAL_CMD_NO_WIND_SENSE_CLOSE,
	LOCAL_CMD_CHILD_PREVENT_COLD_WIND_OPEN,
	LOCAL_CMD_CHILD_PREVENT_COLD_WIND_CLOSE,
	LOCAL_CMD_STRONG_WIND_OPEN,
	LOCAL_CMD_STRONG_WIND_CLOSE,
	LOCAL_CMD_SCREEN_DISPLAY_OPEN,
	LOCAL_CMD_SCREEN_DISPLAY_CLOSE,
	LOCAL_CMD_MONITOR,
	LOCAL_CMD_GET_NORMAL_STATE,
	LOCAL_CMD_GET_SELF_CLEAN_STATE,
	LOCAL_CMD_GET_NO_WIND_SENSE_STATE,
	LOCAL_CMD_GET_STATE_TIMEOUT,
	LOCAL_CMD_GET_STATE_FAILED,
};

/*
typedef enum MS_UART_DOWN_EVENT_T{
MS_SYS_EVENT_SNIFFER_OK = 0x20,//save & switch to sta
MS_SYS_EVENT_SNIFFER_FAILED,
MS_SYS_EVENT_SAVE_INFO_AND_REBOOT,
MS_SYS_EVENT_LOGIN_MS_CLOUD,
MS_SYS_EVENT_LOGOUT_MS_CLOUD,
MS_SYS_EVENT_SYS_STATUS_CHANGED,//include login/logout, tcp clients change
MS_SYS_EVENT_TRANSDATA,
MS_SYS_EVENT_REBOOT,
MS_SYS_EVENT_RESET,
MS_SYS_EVENT_ONLY_SAVE_INFO,
MS_SYS_EVENT_REFRESH_R3,
MS_UART_EVENT_START_SUCCESS,
MS_UART_EVENT_START_FAILED,
MS_UART_EVENT_REPORT_NOACK,
MS_UART_EVENT_REPORT_ACK,
MS_UART_EVENT_SYN_TIME,
MS_UART_EVENT_DEVICE_UNBINDING
}E_MsDownStream;//[!!!note : max value is 15]
*/
typedef enum{

	ENUM_MS_DOWNSTREAM_NET,					//!< 外网->串口
	ENUM_MS_DOWNSTREAM_LOCALNET,				//!<内网->串口
	ENUM_MS_DOWNSTREAM_NET_MSPEECH,		        //!<语音-》串口

}E_MsNetAppEvent;

/*
struct T_MsTransStream{

	E_MsDownStream event;						//!< 帧类型，@see E_MsNetAppEvent.

	unsigned char data[MAX_UART_LEN];							//!< 帧数据，帧数据的格式根据帧类型进行解析.

	size_t size;								//!< 帧数据长度，缓冲区里有效数据的长度.

	unsigned int msg_id;							//!< 消息ID

}T_MsTransStream;
*/
enum {
	B1_WORK_STATUS_STANDBY=0x01,
	B1_WORK_STATUS_WORK,
	B1_WORK_STATUS_SAVE_POWER,
	B1_WORK_STATUS_ORDER,
	B1_WORK_STATUS_WORK_FINISH,
	B1_WORK_STATUS_THREE,
	B1_WORK_STATUS_PAUSE,
	B1_WORK_STATUS_PAUSE_C
};
enum {
	B1_WORK_MODE_NONE=0x00,
	B1_WORK_MODE_DOUBLE_TUBE,
	B1_WORK_MODE_HOT_WIND_BAKE,
	B1_WORK_MODE_DOUBLE_TUBE_FAN,
	B1_WORK_MODE_UNDERSIDE_TUBE,
	B1_WORK_MODE_DOUBLE_UPSIDE_TUBE_FAN,
	B1_WORK_MODE_CORE_BAKING,
	B1_WORK_MODE_TOTAL_BAKING,
	B1_WORK_MODE_UNDERSIDE_TUBE_HOT_WIND,
	B1_WORK_MODE_ZYMOSIS
};

int asr_callback(void *user_data, int type, char *msg, int len);
int local_fail_AC(void *user_data, int type);
int asr_callback_sec(void *user_data, int type, char *msg, int len);
void local_timer_init(void);
void local_timer_start(void);
void result_parse(char *data,unsigned char cmdtype);
void result_03parse(char *data);
void local_timer_stop(void);
int get_device_info(ms_stored_info_t *dev_info);

#endif
