From 0cc6585e9e6a4bca5f9a5b8edff0237a01039051 Mon Sep 17 00:00:00 2001
From: linjunyan <junyanlin@allwinnertech.com>
Date: Mon, 29 Jul 2019 17:42:52 +0800
Subject: [PATCH] GStreamerMediaPlayer: change NULL sentinel to nullptr

To avoid the compilation errors: "missing sentinel in function call
[-Werror=format=]".
---
 .../GStreamerMediaPlayer/src/BaseStreamSource.cpp  |  2 +-
 .../GStreamerMediaPlayer/src/MediaPlayer.cpp       | 32 +++++++++++-----------
 2 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/MediaPlayer/GStreamerMediaPlayer/src/BaseStreamSource.cpp b/MediaPlayer/GStreamerMediaPlayer/src/BaseStreamSource.cpp
index 402241a..efa2748 100644
--- a/MediaPlayer/GStreamerMediaPlayer/src/BaseStreamSource.cpp
+++ b/MediaPlayer/GStreamerMediaPlayer/src/BaseStreamSource.cpp
@@ -148,7 +148,7 @@ bool BaseStreamSource::init(const AudioFormat* audioFormat) {
             return false;
         }
         gst_app_src_set_caps(GST_APP_SRC(appsrc), audioCaps);
-        g_object_set(G_OBJECT(appsrc), "format", GST_FORMAT_TIME, NULL);
+        g_object_set(G_OBJECT(appsrc), "format", GST_FORMAT_TIME, nullptr);
     } else {
         ACSDK_DEBUG9(LX("initNoAudioFormat"));
     }
diff --git a/MediaPlayer/GStreamerMediaPlayer/src/MediaPlayer.cpp b/MediaPlayer/GStreamerMediaPlayer/src/MediaPlayer.cpp
index d434c1d..ad98d98 100644
--- a/MediaPlayer/GStreamerMediaPlayer/src/MediaPlayer.cpp
+++ b/MediaPlayer/GStreamerMediaPlayer/src/MediaPlayer.cpp
@@ -238,7 +238,7 @@ uint64_t MediaPlayer::getNumBytesBuffered() {
     }
     if (m_pipeline.decodedQueue) {
         guint bytesInQueue = 0;
-        g_object_get(m_pipeline.decodedQueue, "current-level-bytes", &bytesInQueue, NULL);
+        g_object_get(m_pipeline.decodedQueue, "current-level-bytes", &bytesInQueue, nullptr);
         bytesBuffered += bytesInQueue;
     }
     return bytesBuffered;
@@ -353,9 +353,9 @@ bool MediaPlayer::setVolume(int8_t volume) {
 
 void MediaPlayer::handleSetVolumeInternal(gdouble gstVolume) {
     if (gstVolume == 0) {
-        g_object_set(m_pipeline.volume, "volume", VOLUME_ZERO, NULL);
+        g_object_set(m_pipeline.volume, "volume", VOLUME_ZERO, nullptr);
     } else {
-        g_object_set(m_pipeline.volume, "volume", gstVolume, NULL);
+        g_object_set(m_pipeline.volume, "volume", gstVolume, nullptr);
     }
     m_lastVolume = gstVolume;
 }
@@ -419,7 +419,7 @@ void MediaPlayer::handleAdjustVolume(std::promise<bool>* promise, int8_t delta)
     }
 
     gdouble gstVolume;
-    g_object_get(m_pipeline.volume, "volume", &gstVolume, NULL);
+    g_object_get(m_pipeline.volume, "volume", &gstVolume, nullptr);
 
     gdouble gstDelta;
     if (!toGstDeltaVolume->normalize(delta, &gstDelta)) {
@@ -461,7 +461,7 @@ void MediaPlayer::handleSetMute(std::promise<bool>* promise, bool mute) {
     }
 
     // A fix for GStreamer crashing for zero volume on PCM data
-    g_object_set(m_pipeline.volume, "volume", mute || m_lastVolume == 0 ? VOLUME_ZERO : m_lastVolume, NULL);
+    g_object_set(m_pipeline.volume, "volume", mute || m_lastVolume == 0 ? VOLUME_ZERO : m_lastVolume, nullptr);
     m_isMuted = mute;
     promise->set_value(true);
 }
@@ -505,7 +505,7 @@ void MediaPlayer::handleGetSpeakerSettings(
     gdouble avsVolume;
     gdouble gstVolume;
     gboolean mute;
-    g_object_get(m_pipeline.volume, "volume", &gstVolume, "mute", &mute, NULL);
+    g_object_get(m_pipeline.volume, "volume", &gstVolume, "mute", &mute, nullptr);
 
     /// A part of GStreamer crash fix for zero volume on PCM data
     mute = m_isMuted;
@@ -620,7 +620,7 @@ bool MediaPlayer::setupPipeline() {
         ACSDK_ERROR(LX("setupPipelineFailed").d("reason", "createQueueElementFailed"));
         return false;
     }
-    g_object_set(m_pipeline.decodedQueue, "use-buffering", TRUE, NULL);
+    g_object_set(m_pipeline.decodedQueue, "use-buffering", TRUE, nullptr);
     m_pipeline.converter = gst_element_factory_make("audioconvert", "converter");
     if (!m_pipeline.converter) {
         ACSDK_ERROR(LX("setupPipelineFailed").d("reason", "createConverterElementFailed"));
@@ -676,10 +676,10 @@ bool MediaPlayer::setupPipeline() {
             // Found key, add it to capability struct
             switch (it.second) {
                 case G_TYPE_INT:
-                    gst_caps_set_simple(caps, it.first.c_str(), it.second, std::stoi(value), NULL);
+                    gst_caps_set_simple(caps, it.first.c_str(), it.second, std::stoi(value), nullptr);
                     break;
                 case G_TYPE_STRING:
-                    gst_caps_set_simple(caps, it.first.c_str(), it.second, value.c_str(), NULL);
+                    gst_caps_set_simple(caps, it.first.c_str(), it.second, value.c_str(), nullptr);
                     break;
             }
         }
@@ -700,7 +700,7 @@ bool MediaPlayer::setupPipeline() {
                 return false;
             }
 
-            g_object_set(G_OBJECT(m_pipeline.caps), "caps", caps, NULL);
+            g_object_set(G_OBJECT(m_pipeline.caps), "caps", caps, nullptr);
         } else {
             ACSDK_INFO(LX("invalidOutputConversion").d("string", gst_caps_to_string(caps)));
         }
@@ -778,7 +778,7 @@ void MediaPlayer::tearDownTransientPipelineElements(bool notifyStop) {
     m_isBufferUnderrun = false;
     if (m_pipeline.audioSink) {
         // Set audioSink's sink option back to TRUE
-        g_object_set(m_pipeline.audioSink, "sync", TRUE, NULL);
+        g_object_set(m_pipeline.audioSink, "sync", TRUE, nullptr);
     }
 }
 
@@ -1088,11 +1088,11 @@ gboolean MediaPlayer::handleBusMessage(GstMessage* message) {
                      * play choppily
                      */
                     ACSDK_DEBUG5(LX("audioSink").m("Sync option set to false."));
-                    g_object_set(m_pipeline.audioSink, "sync", FALSE, NULL);
+                    g_object_set(m_pipeline.audioSink, "sync", FALSE, nullptr);
                 } else if (GST_STATE_NULL == newState) {
                     // Reset sync state back to true if tsdemux changes to NULL state
                     ACSDK_DEBUG5(LX("audioSink").m("Sync option set to true."));
-                    g_object_set(m_pipeline.audioSink, "sync", TRUE, NULL);
+                    g_object_set(m_pipeline.audioSink, "sync", TRUE, nullptr);
                 }
             }
             break;
@@ -1699,7 +1699,7 @@ void MediaPlayer::setEqualizerBandLevels(audio::EqualizerBandLevelMap bandLevelM
                 G_OBJECT(m_pipeline.equalizer),
                 GSTREAMER_BASS_BAND_NAME,
                 static_cast<gdouble>(clampEqualizerLevel(it->second)),
-                NULL);
+                nullptr);
         }
         it = bandLevelMap.find(audio::EqualizerBand::MIDRANGE);
         if (bandLevelMap.end() != it) {
@@ -1707,7 +1707,7 @@ void MediaPlayer::setEqualizerBandLevels(audio::EqualizerBandLevelMap bandLevelM
                 G_OBJECT(m_pipeline.equalizer),
                 GSTREAMER_MIDRANGE_BAND_NAME,
                 static_cast<gdouble>(clampEqualizerLevel(it->second)),
-                NULL);
+                nullptr);
         }
         it = bandLevelMap.find(audio::EqualizerBand::TREBLE);
         if (bandLevelMap.end() != it) {
@@ -1715,7 +1715,7 @@ void MediaPlayer::setEqualizerBandLevels(audio::EqualizerBandLevelMap bandLevelM
                 G_OBJECT(m_pipeline.equalizer),
                 GSTREAMER_TREBLE_BAND_NAME,
                 static_cast<gdouble>(clampEqualizerLevel(it->second)),
-                NULL);
+                nullptr);
         }
         promise.set_value();
         return false;
-- 
1.9.1

